<?php namespace ProcessWire;

/**
 *
 * Add Link to Filefield
 *
 * @version 0.0.2
 * @author Matjaž Potočnik, inspired by the module Add Image URLs by Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * https://processwire.com
 *
 * Please read https://processwire.com/blog/posts/pw-3.0.142/ and USAGE.MD for instructions
 *
 */

class AddLink extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Add Links',
			'summary' => 'Allows links to be added to files field',
			'version' => '0.0.2',
			'author' => 'Matja&#382; Poto&#269;nik',
			'href' => 'https://github.com/matjazpotocnik/AddLink',
			'icon' => 'link',
			'autoload' => 'template=admin',
			'requires' => 'ProcessWire>=3.0.142',
		);
	}

	const UPLOAD_FILE_EXTENSION = "link"; // extension of the "uploaded" file, perhaps this should be configurable?
	const UPLOAD_FILE_PREFIX = "_"; // prefix of the "uploaded" file, perhaps this should be configurable?

	const FILE_FIELDS = 'file_fields';
	const URL_FIELDS = 'url_fields';

	protected $pagefile;

	/**
	 * This module config data
	 * @var array
	 */
	protected static $configData = [];

	/**
	 * This module default config data
	 * @var array
	 */
	protected static $configDataDefault = [];

	/**
	 * Construct and set default configuration
	 *
	 */
	public function __construct() {

		self::$configDataDefault = [
			self::FILE_FIELDS => [], // array of file fields (FieldtypeFile) with upload link support
			self::URL_FIELDS => [], // array of fields inside field-* templates that should not be shown
		];

		self::$configData = $this->_sanitize_data($this->wire('modules')->getModuleConfigData($this));
	}

	private function _sanitize_data($data) {
		if(empty($data)) return self::$configDataDefault;

		$_data = $data;

		//sanitize $data if needed

		$data = array_merge(self::$configDataDefault, $data);

		if(json_encode($data) != json_encode($_data)) $this->wire('modules')->saveConfig($this, $data);
		return $data;
	}

	/**
	 * Add the extension to the FieldtypeFile to allow uploads and setup hooks
	 */
	public function ready() {

		// return early if no file field is setup in the module config
		$filefields = self::$configData[self::FILE_FIELDS];
		if(empty($filefields)) return;

		$fields = $this->wire('fields');
		foreach($filefields as $fieldname){
			//bd($fieldname);
			$field = $fields->get($fieldname);
			if(strpos($field->extensions, self::UPLOAD_FILE_EXTENSION) === false) {
				$field->set('extensions', $field->extensions . ' ' . self::UPLOAD_FILE_EXTENSION);
			}
			//bd($field);
		}

		$this->addHookAfter('InputfieldFile::render', $this, 'addUrlButton');
		$this->addHookBefore('ProcessPageEdit::execute', $this, 'addDependencies');
		$this->addHookBefore('InputfieldFile::renderItem', $this, 'renderItemBefore');
		$this->addHookAfter('InputfieldFile::renderItem', $this, 'renderItemAfter');
		//$this->addHookBefore('InputfieldURL::render', $this, 'hideFieldURL');
		$this->addHookBefore('Inputfield::render', $this, 'hideField'); //more generic, allowing for InputfieldText to be used as input
	}

	/**
	 * Prevent rendering of url field if contained inside file field
	 *
	 * @param HookEvent $event
	 */
	protected function hideFieldURL(HookEvent $event) {
		$inputfieldURL = $event->object;
		$field = $inputfieldURL->hasField;

		//only for specific field
		if(!$field || !in_array($field->name, self::$configData[self::URL_FIELDS])) return;

		if($this->pagefile && $this->pagefile->ext() !== self::UPLOAD_FILE_EXTENSION) {
			//hide the field
			$event->replace = true;
		}
	}

	/**
	 * Prevent rendering of field if contained inside file field
	 *
	 * @param HookEvent $event
	 */
	protected function hideField(HookEvent $event) {
		$inputfield = $event->object;
		$hasField = $inputfield->hasField; //povezava

		//return early if no field
		if(!$hasField) return;

		//return if field is not on the list of fields to hide
		if(!in_array($hasField, self::$configData[self::URL_FIELDS])) return;

		//field is on the list of fields to hide, but it must be inside selected file field templates
		$field = $inputfield->name; //povezava_datoteka_11f1e0d07a1530f599810dba7b25435e
		$field1 = str_replace($hasField . '_', '', $field); //datoteka_11f1e0d07a1530f599810dba7b25435e
		$found = false;
		foreach(self::$configData[self::FILE_FIELDS] as $fld) {
			if(strpos($field1, $fld) === 0) $found = true;
		}
		if(!$found) return;

		if($this->pagefile && $this->pagefile->ext() !== self::UPLOAD_FILE_EXTENSION) {
			//hide the field
			$event->replace = true;
		}
	}

	/**
	 * Set $this->pagefile if field name is on self::$configData[self::FILE_FIELDS]
	 *
	 * @param HookEvent $event
	 */
	protected function renderItemBefore(HookEvent $event) {
		//if($this->config->ajax) return;

		$inputfieldFile = $event->object;
		$field = $inputfieldFile->hasField;

		if(!$field) return;

		//only for specific upload field name
		if(!in_array($field->name, self::$configData[self::FILE_FIELDS])) return;

		//pagefile needed in hideField hook
		$this->pagefile = $event->arguments[0];
	}

	/**
	 * Hide/change file information
	 *
	 * @param HookEvent $event
	 */
	protected function renderItemAfter(HookEvent $event) {
		//if($this->config->ajax) return;

		$inputfieldFile = $event->object;
		$field = $inputfieldFile->hasField;
		$pagefile = $event->arguments[0];

		if(!$field) return;

		//only for specific upload field name
		if(!in_array($field->name, self::$configData[self::FILE_FIELDS])) return;

		//$field->set('extensions', $field->extensions . " " . self::UPLOAD_FILE_EXTENSION);

		//only for specific extension of uploaded file
		if($pagefile->ext() !== self::UPLOAD_FILE_EXTENSION) return;

		$out = $event->return;

		//hide filesize info
		$out = str_replace("<span class='InputfieldFileStats'>", "<span style='display:none'>", $out);

		//change <a> to <span> to prevent clicking
		$out = str_replace("<a class='InputfieldFileName' title=",
			"<span class='InputfieldFileName' onmouseover='this.style.textDecoration=\"none\";this.style.cursor=\"auto\"' data-title=", $out);
		$out = str_replace("." . self::UPLOAD_FILE_EXTENSION . "</a>", "." . self::UPLOAD_FILE_EXTENSION . "</span>", $out);

		//change fa-file icon to fa-link
		$out = str_replace("<i class='fa fa-file-o fa-fw", "<i class='fa fa-link fa-fw", $out);

		$event->return = $out;
	}


	/**
	 * Add insert link button/link for enabled file fields
	 *
	 * @param HookEvent $event
	 */
	protected function addUrlButton(HookEvent $event) {
		if($this->process != 'ProcessPageEdit') return;
		if($this->wire('config')->demo) return;

		$inputfield = $event->object;
		$field = $inputfield->hasField;
		if(!in_array($field->name, self::$configData[self::FILE_FIELDS])) return;

		$filename = self::UPLOAD_FILE_PREFIX . '#.' . self::UPLOAD_FILE_EXTENSION; //# will be replaced by random numbers in js
		$button_text = $this->_('Insert URL');

		$button = "<small><button class='url-upload-toggle InputMask uk-button uk-button-small ui-button ui-widget ui-corner-all ui-state-default ui-priority-secondary' " .
			"data-fieldname='{$field->name}' " .
			"data-filename='{$filename}' " .
			">" .
			"<span class='ui-button-text'><i class='fa fa-link'></i> $button_text</span></button></small>";
		$button = "<a class='url-upload-toggle uk-button-small uk-link uk-padding-remove-left' style='margin-left:10px' href='#' " .
			"data-fieldname='{$field->name}' " .
			"data-filename='{$filename}' " .
			">" .
			"<i class='fa fa-link'></i> $button_text</a>";

		$out = $event->return;

		$out = str_replace("<span class='InputfieldFileValidExtensions", "$button<span class='InputfieldFileValidExtensions", $out);
		$out = str_replace("<div class='InputMask ui-button ui-state-default'>", "<div class='InputMask ui-button ui-state-default uk-margin-remove-right'>", $out);

		$event->return = $out;
	}

	/**
	 * Add JS and CSS dependencies
	 *
	 * @param HookEvent $event
	 */
	protected function addDependencies(HookEvent $event) {
		//if($this->config->ajax) return;

		$config = $this->wire('config');
		$info = $this->getModuleInfo();
		$version = $info['version'];
		$config->scripts->add($config->urls->{$this} . "{$this}.js?v={$version}");
		$config->styles->add($config->urls->{$this} . "{$this}.css?v={$version}");
	}

	/**
	 * Configure the input fields for the backend.
	 *
	 * @param  array  $data Module data from the database.
	 * @return InputfieldWrapper
	 */
	public function getModuleConfigInputfields($data) {
		if(empty($data)) $data = self::$configDataDefault;

		$modules = $this->wire('modules');
		$fields = $this->wire('fields');
		$templates = $this->wire('templates');
		$wrapper = new InputfieldWrapper();

		// usage
		$f = $modules->get('InputfieldMarkup');
		$f->label = __('Instructions (must read)');
		$f->icon = 'book';
		$usage = file_get_contents(__DIR__ . '/USAGE.md');
		$usage = $f->entityEncode($usage, Inputfield::textFormatMarkdown);
		$f->value = $usage;
		$wrapper->add($f);

		// list of FieldtypeFile fields
		$f = $modules->get('InputfieldAsmSelect');
		$f_name = self::FILE_FIELDS;
		$f->name = $f_name;
		$f->label = $this->_('File fields to allow to have links upload');
		$f->description = $this->_('File fields must match field name that you added to your template. Save after changing this as it may affect what settings are available on the "Fields to hide" list.');
		$f->icon = 'list';
		$f->columnWidth = 50;

		// only include non-system fields and "special" templates that act as a container for other fields
		$options = [];
		foreach($fields->find('type=FieldtypeFile') as $field) {
			if($field->flags & Field::flagSystem || $field->flags & Field::flagPermanent) continue;
			if($templates->find("name=field-{$field->name}")->count > 0) $options[$field->name] = $field->name;
		}
		$f->addOptions($options);
		$f->value = $data[$f->name];
		$wrapper->add($f);

		// list of FieldtypeURL fields
		$f = $modules->get('InputfieldAsmSelect');
		$f_name = self::URL_FIELDS;
		$f->name = $f_name;
		$f->label = $this->_('Fields to hide when used on regular files');
		$f->description = $this->_('Selected fields will be hidden when they are used with regular uploaded files.');
		$f->icon = 'list';
		$f->columnWidth = 50;

		// only include fields that are inside "field-*" templates and exclude non-system fields
		$options1 = [];
		$tpls_selector = 'name=field-' . implode('|field-', $options); // name=field-myfiles1|fields-myfiles2|...
		$tpls = $templates->find($tpls_selector);
		foreach($tpls as $tpl) {
			//$fldgs = $tpl->fields->find('type=FieldtypeURL|FieldtypeText'); //fieldgroups
			$fldgs = $tpl->fields; //supports hiding other fields too, not just url or text
			foreach($fldgs as $fld) {
				if($fld->flags & Field::flagSystem || $fld->flags & Field::flagPermanent) continue;
				$options1[$fld->name] = $fld->name;
			}
		}
		$f->addOptions($options1);
		$f->value = $data[$f->name];
		$wrapper->add($f);

		return $wrapper;
	}

}
